Paging:
=======

Physical memory:
----------------

0x0000.0000.0000.0000   +-----------------------+ -----
                        |                       |   |
                        |                       |
                        |          RAM          | 256 TiB
                        |                       |
                        |                       |   |
0x0001.0000.0000.0000   +-----------------------+ -----
                        |                       |
                        |   memory mapped I/O   |
                        |       (uncached)      |
                        |                       |
0xFFFF.FFFF.FFFF.FFFF   +-----------------------+

Virtual memory:
---------------

0x0000.0000.0000.0000   +-----------------------+ -----
                        |                       |   |
                        |    segment 1 (000)    |   |
                        |                       |   |
                        +-----------------------+   |
                        |                       |   |
                        |    segment 2 (001)    |
                        |                       |   userspace
                        +-----------------------+   leading 3 bits determine segment
                        |                       |   => 61 bit virtual addresses
                        |    segment 3 (010)    |
                        |                       |   |
                        +-----------------------+   |
                        |                       |   |
                        |    segment 4 (011)    |   |
                        |                       |   |
0x8000.0000.0000.0000   +-----------------------+ -----
                        |                       |
                        |     priviledged       |
                        |  mapped to physical   |
                        |                       |
0xFFFF.FFFF.FFFF.FFFF   +-----------------------+

Register rV:
------------

64  60   56   52   48       40                          13          3   0
+----+----+----+----+--------+---------------------------+----------+---+
| b_1| b_2| b_3| b_4|   s    |             r             |     n    | f |
+----+----+----+----+--------+---------------------------+----------+---+

b_i defines the size of the segment i:
- segment i has at most 1024^(b_(i+1) - b_i) pages.
- segment i must have at most one page when b_i = b_(i+1)
- segment i must be empty if b_i > b_(i+1)
- b_0 = 0

s defines the page size: 2^s
r = root location
n = address space number
f = 0 => virtual address translation by hardware
f = 1 => virtual address translation by software. b_1,b_2,b_3,b_4 and r is ignored by hardware.
f = x => reserved -> memory-protection failure

PTE:
----

64              48                               ?   13          3   0
+----------------+-------------------------------+----+----------+---+
|       x        |               a               | y  |     n    |rwx|
+----------------+-------------------------------+----+----------+---+

- ? depends on rV.s. i.e. a is (48 - rV.s) wide and y (rV.s - 13)
- x and y are ignored (usable by OS)
- n = address space number (has to match rV.n)
- (2^(rV.s)) * a = physical address of the page
- if the protection-bits are violated or the address-space doesn't match, a memory-protection failure
  occurrs

PTP:
----

64                                                  13          3   0
+-+--------------------------------------------------+----------+---+
|1|                         c                        |     n    | q |
+-+--------------------------------------------------+----------+---+

- n = address space number (has to match rV.n)
- q = ignored
- c = pointer to page-table: 2^13 * c + 8 * pti

Example:
--------

rV:
+----+----+----+----+--------+---------------------------+----------+---+
|  1 |  3 |  4 |  8 |   14   |           0x1000          |     n    | f |
+----+----+----+----+--------+---------------------------+----------+---+
                                           |
/------------------------------------------/
|
|   |  8KiB |     16KiB     |  8KiB |            32 KiB             |
|   +-+-+---+-+-+---+-+-+---+-+-+---+-+-+---+-+-+---+-+-+---+-+-+---+
\-->| | |...| | |...| | |...| | |...| | |...| | |...| | |...| | |...|
    +-+-+---+-+-+---+-+-+---+-+-+---+-+-+---+-+-+---+-+-+---+-+-+---+
    |  seg0 |  seg1 |  seg1 |  seg2 |  seg3 |  seg3 |  seg3 |  seg3 |
    |  ptes |  ptes |  ptps |  ptes |  ptes |  ptps |  ptps |  ptps |


Address 0x0000000:
	-> segment 0
	A/2^s = 0x0000 / 0x4000 = 0
	-> (0 0 0 0 0)
	PTE: m8[2^13*(r + b_i) + 8*a_0] = m8[0x2000*0x1000] = m8[0x2000000]
Address 0x0004000:
	-> segment 0
	A/2^s = 0x4000 / 0x4000 = 1
	-> (0 0 0 0 1)
	PTE: m8[2^13*(r + b_i) + 8*a_0] = m8[0x2000*0x1000 + 8*1] = m8[0x2000008]
Address 0x0FFC000:
	-> segment 0
	A/2^s = 0xFFC000 / 0x4000 = 1023
	-> (0 0 0 0 1023)
	PTE: m8[2^13*(r + b_i) + 8*a_0] = m8[0x2000*0x1000 + 8*1023] = m8[0x2001FF8]
Address 0x1000000:
	-> segment 0
	A/2^s = 0x1000000 / 0x4000 = 1024
	-> (0 0 0 1 0)
	PTP: m8[2^13(r + b_i + 1) + 8*a_1] = m8[0x2000*(0x1000 + 1) + 8*1] = m8[0x2002008]
	PTE: m8[2^13 * PTP.c + 8*a_0] = m8[0x2000*PTP.c]
Address 0x1FFC000:
	-> segment 0
	A/2^s = 0x1FFC000 / 0x4000 = 2047
	-> (0 0 0 1 1023)
	PTP: m8[2^13(r + b_i + 1) + 8*a_1] = m8[0x2000*(0x1000 + 1) + 8*1023] = m8[0x2003FF8]
	PTE: m8[2^13 * PTP.c + 8*a_0] = m8[0x2000*PTP.c + 8*1023]
	

2^61 =          0x2000000000000000
2^13 * 1024^5 = 0x8000000000000000
2^63 =          0x8000000000000000

Translation-Cache:
------------------

Translation-Key:
64  61                                 13+s-13       13          3   0
+-+--+---------------------------------------+--------+----------+---+
|0|i |                   v                   |   0    |     n    | 0 |
+-+--+---------------------------------------+--------+----------+---+
v = page-number
i = segment

Translation:
38                                 3+s-13        3   0
+---------------------------------------+--------+---+
|                    a                  |   0    | p |
+---------------------------------------+--------+---+



