%
% some io-functions
%

% terminal 0 rcvr ctrl: #8002000000000000
% terminal 0 rcvr data: #8002000000000008
% terminal 0 xmtr ctrl: #8002000000000010
% terminal 0 xmtr data: #8002000000000018
% terminal 1 rcvr ctrl: #8002000100000000
% terminal 1 rcvr data: #8002000100000008
% terminal 1 xmtr ctrl: #8002000100000010
% terminal 1 xmtr data: #8002000100000018

		PREFIX	io:

hexch	BYTE	"0123456789ABCDEF",0
		LOC	@+(4-@)&3
nan		BYTE	"nan",0
inf		BYTE	"inf",0

% void putf(octa term,octa f)
putf	GET		$2,:rJ				% save rJ
		BNN		$1,1F				% f >= 0?
		SET		$4,$0
		SET		$5,'-'
		PUSHJ	$3,putc				% putc(term,'-')
		ANDNH	$1,#8000			% f = -f
1H		SETH	$3,#7FF0
		AND		$4,$1,$3			% check exponent
		CMPU	$5,$4,$3
		BNZ		$5,3F				% if not #7FF, its no nan and no inf
		NEG		$3,0,1
		ANDNH	$3,#FFF0			% fraction-mask
		AND		$4,$1,$3
		BNZ		$4,2F				% if fraction not zero, its nan
		SET		$4,$0
		GETA	$5,inf
		PUSHJ	$3,puts				% puts(term,"inf")
		JMP		6F
2H		SET		$4,$0
		GETA	$5,nan
		PUSHJ	$3,puts				% puts(term,"nan")
		JMP		6F
3H		SET		$4,$0
		SET		$5,$1
		PUSHJ	$3,_putfn			% _putfn(term,f)
		SET		$4,$0
		SET		$5,'.'
		PUSHJ	$3,putc				% putc(term,'.')
		SETH	$4,#4024			% 10.0
		FINT	$3,:ROUND_OFF,$1
		FSUB	$1,$1,$3			% f -= (int)f
		% multiply it with 10 until the fraction is gone
		FINT	$3,:ROUND_OFF,$1
4H		CMPU	$3,$1,$3
		BZ		$3,5F				% if fraction == 0, we are done
		FMUL	$1,$1,$4			% f *= 10
		FINT	$3,:ROUND_OFF,$1
		BNZ		$3,4B				% if its still zero, print the 0
		SET		$6,$0
		SET		$7,'0'
		PUSHJ	$5,putc				% putc(term,'0')
		JMP		4B
5H		SET		$4,$0
		SET		$5,$1
		PUSHJ	$3,_putfn			% finally, print it
6H		PUT		:rJ,$2				% restore rJ
		POP		0,0

% void _putfn(octa term,octa f)
_putfn	GET		$2,:rJ
		FINT	$1,:ROUND_OFF,$1	% f = (int)f
		SETH	$3,#4024			% 10.0
		FCMP	$4,$1,$3
		BN		$4,1F				% if g < 10, stop recursion
		FDIV	$6,$1,$3			% g = f / 10
		SET		$5,$0
		PUSHJ	$4,_putfn			% _putfn(g)
1H		FREM	$5,$1,$3			% x = f % 10
		BNN		$5,2F				% its negative if its >= 5, (-5, -4, ...)
		FADD	$5,$3,$5			% so, x = 10 + x
2H		SET		$4,$0
		FIX		$5,$5
		ADDU	$5,$5,'0'			% x += '0'
		PUSHJ	$3,putc				% putc(term,x)
		PUT		:rJ,$2				% restore rJ
		POP		0,0

% void putn(octa term,octa n)
putn	GET		$2,:rJ				% save rJ
		PBNN	$1,1F				% n < 0?
		OR		$4,$0,$0
		SET		$5,'-'
		PUSHJ	$3,putc				% putc(term,'-')
		NEG		$1,0,$1				% n = -n
1H		CMPU	$3,$1,10
		PBN		$3,1F				% n >= 10?
		OR		$4,$0,$0
		DIV		$5,$1,10			% t = n / 10
		GET		$1,:rR				% n = n % 10
		PUSHJ	$3,putn				% putn(term,t)
1H		OR		$4,$0,$0
		OR		$5,$1,$1
		ADDU	$5,$5,48			% char + '0'
		PUSHJ	$3,putc				% putc(term,n)
		PUT		:rJ,$2				% restore rJ
		POP		0,0

% void putu(octa term,octa u,octa base)
putu	GET		$3,:rJ				% save rJ
		CMPU	$4,$1,$2
		PBN		$4,1F				% n >= base?
		OR		$5,$0,$0
		DIVU	$6,$1,$2			% t = n / base
		OR		$7,$2,$2
		GET		$1,:rR				% n = n % base
		PUSHJ	$4,putu				% putu(term,t,base)
1H		OR		$5,$0,$0
		GETA	$6,hexch
		LDBU	$6,$6,$1
		PUSHJ	$4,putc				% putc(term,hexch[n])
		PUT		:rJ,$3				% restore rJ
		POP		0,0

% octa gets(octa term,char *dst,octa max)
gets	GET		$3,:rJ				% save rJ
		ADDU	$4,$1,0
1H		CMP		$5,$2,1
		BNP		$5,2F				% if(max <= 1) goto 1F
		ADDU	$6,$0,0
		PUSHJ	$5,getc				% call getc(term)
		ADDU	$7,$0,0
		ADDU	$8,$5,0
		PUSHJ	$6,putc				% call putc(term,c)
		CMP		$6,$5,#0D			% c == \n?
		BZ		$6,1F				% if so, stop
		STBU	$5,$1,0				% otherwise, store char
		ADDU	$1,$1,1				% to next
		SUB		$2,$2,1				% max--
		JMP		1B
2H		ADDU	$6,$0,0
		SET		$7,#0D
		PUSHJ	$5,putc				% call putc(term,'\n')
1H		ADDU	$6,$0,0
		SET		$7,#0A
		PUSHJ	$5,putc				% call putc(term,'\r')
		STBU	$10,$1,0			% null-termination
		SUBU	$0,$1,$4			% determine length
		PUT		:rJ,$3				% restore rJ
		POP		1,0					% return length

% octa getc(octa term)
getc	SETH	$1,#8002			% base address: #8002000000000000
		SL		$0,$0,32			% or in terminal-number
		OR		$1,$1,$0			% -> #8002000100000000 for term 1, e.g.
1H		LDOU	$2,$1,#0			% read ctrl-reg
		AND		$2,$2,#1			% extract RDY-bit
		PBZ		$2,1B				% wait until its set
		LDOU	$0,$1,#8			% load char
		POP		1,0					% return it

% void puts(octa term,char *string)
puts	GET		$2,:rJ				% save rJ
1H		LDBU	$5,$1,0				% load char from string
		BZ		$5,2F				% if its 0, we are done
		ADDU	$4,$0,0
		PUSHJ	$3,putc				% call putc(c)
		ADDU	$1,$1,1				% to next char
		JMP		1B
2H		PUT		:rJ,$2				% restore rJ
		POP		0,0

% void putc(octa term,octa character)
putc	SETH	$2,#8002			% base address: #8002000000000000
		SL		$0,$0,32			% or in terminal-number
		OR		$2,$2,$0			% -> #8002000100000000 for term 1, e.g.
1H		LDOU	$3,$2,#10			% read ctrl-reg
		AND		$3,$3,#1			% exract RDY-bit
		PBZ		$3,1B				% wait until its set
		STOU	$1,$2,#18			% write char
		POP		0,0

% void oputs(char *string)
oputs	GET		$1,:rJ				% save rJ
1H		LDBU	$3,$0,0				% load char from string
		BZ		$3,2F				% if its 0, we are done
		PUSHJ	$2,oputc			% call oputc(c)
		ADDU	$0,$0,1				% to next char
		JMP		1B
2H		PUT		:rJ,$1				% restore rJ
		POP		0,0

% void oputc(octa character)
oputc	SETH	$1,#8004			% base address: #8004000000000000
		STOU	$0,$1,0				% write char
		POP		0,0

		PREFIX	:
